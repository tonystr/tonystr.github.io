{"version":3,"sources":["serviceWorker.js","pages/Home.js","index.js"],"names":["Boolean","window","location","hostname","match","_callee","path","callback","xhttp","regenerator_default","a","wrap","_context","prev","next","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send","stop","ReactDOM","render","react_default","createElement","BrowserRouter","Route","exact","component","_useState","useState","_useState2","Object","slicedToArray","codePreview","setCodePreview","useEffect","requestRawText","res","Fragment","className","id","lib","languages","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iJCgBN,SAAAC,EAA8BC,EAAMC,GAApC,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,QACcN,EAAQ,IAAIO,gBACZC,mBAAqB,WACE,IAArBR,EAAMS,YAAqC,MAAjBT,EAAMU,QAChCX,EAASC,EAAMW,eAGvBX,EAAMY,KAAK,MAAOd,GAAM,GACxBE,EAAMa,OARd,wBAAAT,EAAAU,SAAAjB,6BC1BAkB,IAASC,OACLC,EAAAf,EAAAgB,cAACC,EAAA,EAAD,KACIF,EAAAf,EAAAgB,cAAA,WACID,EAAAf,EAAAgB,cAACE,EAAA,EAAD,CAAOC,OAAK,EAACvB,KAAK,IAAIwB,UDRnB,WAAgB,IAAAC,EAEWC,mBAAS,cAFpBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEpBK,EAFoBH,EAAA,GAEPI,EAFOJ,EAAA,GAU3B,OANAK,oBAAU,kDACNC,CAAwC,WAAY,SAAAC,GAChDH,EAAeG,OAKnBf,EAAAf,EAAAgB,cAAAD,EAAAf,EAAA+B,SAAA,KACIhB,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,OAAOC,GAAG,aACrBlB,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,UACXjB,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,SAAf,0BACAjB,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,UAAf,2BAGRjB,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,OAAOC,GAAG,UACrBlB,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,QACVN,GAAeX,EAAAf,EAAAgB,cAACkB,EAAA,UAAD,CAAWC,UAAW,CAAC,QAAST,IAEpDX,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,SACXjB,EAAAf,EAAAgB,cAAA,OAAKgB,UAAU,SAAf,oBCZhBI,SAASC,eAAe,SFmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a137f762.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Highlight } from 'react-fast-highlight';\r\n\r\nexport default function Home() {\r\n\r\n    const [codePreview, setCodePreview] = useState('loading...');\r\n\r\n    useEffect(() => {\r\n        requestRawText(process.env.PUBLIC_URL + 'code.txt', res => {\r\n            setCodePreview(res);\r\n        });\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <div className='page' id='frontpage'>\r\n                <div className='center'>\r\n                    <div className='title'> Tony Strømsnæs </div>\r\n                    <div className='notice'> Undergoing redesign </div>\r\n                </div>\r\n            </div>\r\n            <div className='page' id='webdev'>\r\n                <div className='left'>\r\n                    {codePreview && <Highlight languages={['jsx']}>{codePreview}</Highlight>}\r\n                </div>\r\n                <div className='right'>\r\n                    <div className='title'> Webdev </div>\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nasync function requestRawText(path, callback) {\r\n        const xhttp = new XMLHttpRequest();\r\n        xhttp.onreadystatechange = () => {\r\n            if (xhttp.readyState === 4 && xhttp.status === 200) {\r\n                callback(xhttp.responseText);\r\n            }\r\n        }\r\n        xhttp.open('GET', path, true);\r\n        xhttp.send();\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport './index.scss';\nimport './highlightjs/styles/atom-one-dark.css';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './pages/Home';\n\nReactDOM.render(\n    <BrowserRouter>\n        <div>\n            <Route exact path='/' component={Home} />\n        </div>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}