{"version":3,"sources":["components/WebdevPage.jsx","functions/requestRawText.jsx"],"names":["WebDevPage","useState","codePreview","setCodePreview","mobile","useWindowSize","viewportWidth","useEffect","then","Prism","highlightAll","requestRawText","res","className","id","content","list","i","websites","length","site","push","target","href","url","rel","name","alt","src","image","role","renderWebsites","to","path","callback","a","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send"],"mappings":"ogCAOe,SAASA,IAAc,IAAD,EACKC,mBAAS,cADd,mBAC1BC,EAD0B,KACbC,EADa,KAI3BC,EAFoBC,cAAlBC,eAEwB,KAEhCC,qBAAU,WACDH,GAA0B,eAAhBF,EAKHE,GACR,kCAAwBI,MAAK,SAAAC,GAAK,OAAIA,EAAMC,kBAL5CC,YAAe,yFAAyF,SAAAC,GACpGT,EAAe,GAAD,OAAIS,EAAJ,aAAYA,IAC1B,kCAAwBJ,MAAK,SAAAC,GAAK,OAAIA,EAAMC,uBAKrD,CAACN,EAAQF,IAqBZ,OACI,0BAASW,UAAW,QAAUT,EAAS,UAAY,IAAKU,GAAG,SAA3D,WACMV,GAAW,qBAAKS,UAAU,OAAf,SACT,qBAAKA,UAAU,cAAf,SACKX,GAAe,8BAAK,sBAAMW,UAAU,qBAAhB,SAAsCX,UAGnE,qBAAKW,UAAU,QAAf,SACI,sBAAKA,UAAU,UAAf,UACI,cAAC,IAAD,CAAcA,UAAU,QAAQE,QAAQ,oBACxC,qBAAKF,UAAU,WAAf,SACI,qBAAKA,UAAU,WAAf,SA9BG,WAGnB,IAFA,IAAMG,EAAO,GAEJC,EAAI,EAAGA,EAAIC,EAASC,OAAQF,IAAK,CACtC,IAAMG,EAAOF,EAASD,GACtBD,EAAKK,KACD,qBAAKR,UAAU,UAAf,SACI,oBAAGS,OAAO,SAASC,KAAMH,EAAKI,IAAKC,IAAI,sBAAvC,UACI,qBAAKZ,UAAU,OAAf,SAAuBO,EAAKM,OAC5B,qBAAKC,IAAK,UAAYP,EAAKM,KAAME,IAAKR,EAAKS,QAC3C,qBAAKhB,UAAU,OAAf,SAAuBO,EAAKU,WAJNb,IAUtC,OAAOD,EAcoCe,OAE/B,sBAAKlB,UAAU,cAAf,UACI,sBAAKA,UAAU,SAAf,UACI,qBAAKe,IAAI,oBAAoBD,IAAI,WACjC,sBAAMd,UAAU,OAAhB,wBAEJ,sBAAKA,UAAU,QAAf,6BACoB,cAAC,IAAD,CAAGmB,GAAG,uBAAN,sBADpB,QACkE,cAAC,IAAD,CAAGA,GAAG,yBAAN,kBADlE,sEAGS,cAAC,IAAD,CAAGA,GAAG,oBAAN,oBAHT,QAGkD,cAAC,IAAD,CAAGA,GAAG,qCAAN,+BAHlD,2I,+FC7DT,SAAerB,EAA9B,oC,4CAAe,WAA8BsB,EAAMC,GAApC,eAAAC,EAAA,uDACLC,EAAQ,IAAIC,gBACZC,mBAAqB,WACE,IAArBF,EAAMG,YAAqC,MAAjBH,EAAMI,QAAkBJ,EAAMK,cACxDP,EAASE,EAAMK,eAGvBL,EAAMM,KAAK,MAAOT,GAAM,GACxBG,EAAMO,OARK,4C","file":"static/js/21.cddc3e29.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SectionTitle from '../components/SectionTitle.jsx';\r\nimport websites from '../data/websites';\r\nimport requestRawText from '../functions/requestRawText.jsx';\r\nimport { useWindowSize } from '@burst/react-use-window-size';\r\nimport A from '../components/A.jsx';\r\n\r\nexport default function WebDevPage() {\r\n    const [codePreview, setCodePreview] = useState('loading...');\r\n    const { viewportWidth } = useWindowSize();\r\n\r\n    const mobile = viewportWidth <= 1162;\r\n\r\n    useEffect(() => {\r\n        if (!mobile && codePreview === 'loading...') {\r\n            requestRawText('https://raw.githubusercontent.com/tonystr/tonystr.github.io/master/src/pages/home.jsx', res => {\r\n                setCodePreview(`${res}\\n${res}`);\r\n                import('./../prism.js').then(Prism => Prism.highlightAll());\r\n            });\r\n        } else if (!mobile) {\r\n            import('./../prism.js').then(Prism => Prism.highlightAll());\r\n        }\r\n    }, [mobile, codePreview]);\r\n\r\n    const renderWebsites = () => {\r\n        const list = [];\r\n\r\n        for (let i = 0; i < websites.length; i++) {\r\n            const site = websites[i];\r\n            list.push(\r\n                <div className='website' key={i}>\r\n                    <a target='_blank' href={site.url} rel=\"noopener noreferrer\">\r\n                        <div className='name'>{site.name}</div>\r\n                        <img alt={'image: ' + site.name} src={site.image} />\r\n                        <div className='role'>{site.role}</div>\r\n                    </a>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    return (\r\n        <section className={'page' + (mobile ? ' mobile' : '')} id='webdev'>\r\n            {!mobile && (<div className='left'>\r\n                <div className='codeWrapper'>\r\n                    {codePreview && <pre><code className='prism language-jsx'>{codePreview}</code></pre>}\r\n                </div>\r\n            </div>)}\r\n            <div className='right'>\r\n                <div className='wrapper'>\r\n                    <SectionTitle className='title' content='Web development' />\r\n                    <div className='showcase'>\r\n                        <div className='gridview'>{renderWebsites()}</div>\r\n                    </div>\r\n                    <div className='description'>\r\n                        <div className='window'>\r\n                            <img src='images/window.png' alt='window' />\r\n                            <span className='name'>TonyStr</span>\r\n                        </div>\r\n                        <div className='inner'>\r\n                            I specialize in <A to='https://reactjs.org/'>React.js</A> and <A to='https://sass-lang.com/'>SCSS</A> for\r\n                            front-end web development, though I also have experience\r\n                            with <A to='https://vuejs.org'>Vue.js</A> and <A to='https://www.styled-components.com/'>styled-components</A>, because\r\n                            I love trying out new technologies. Some of the websites displayed above are also written in plain html/css/js\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n","export default async function requestRawText(path, callback) {\r\n    const xhttp = new XMLHttpRequest();\r\n    xhttp.onreadystatechange = () => {\r\n        if (xhttp.readyState === 4 && xhttp.status === 200 && xhttp.responseText) {\r\n            callback(xhttp.responseText);\r\n        }\r\n    }\r\n    xhttp.open('GET', path, true);\r\n    xhttp.send();\r\n}\r\n"],"sourceRoot":""}